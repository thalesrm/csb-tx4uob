{"version":3,"sources":["main.js"],"names":["viewSize","cubeSize","strokeSize","wireframeColor","sphereSize","sphereColor","sceneBackground","scene","THREE","Scene","aspectRatio","window","innerWidth","innerHeight","camera","OrthographicCamera","position","x","y","z","lookAt","add","renderer","WebGLRenderer","antialias","setSize","canvas","document","body","appendChild","domElement","background","Color","geometry","LineGeometry","setPositions","cube","material","LineMaterial","color","linewidth","resolution","Vector2","wireframe","Line2","group","Group","sphereGeo","SphereGeometry","sphereMat","MeshBasicMaterial","sphere1","Mesh","sphere2","sphere3","sphere4","sphere5","sphere6","sphere7","sphere8","depthTest","renderOrder","logo","controls","OrbitControls","render","requestAnimationFrame","rotation","h","BufferGeometry","push","update","autoRotate","rotateSpeed","zoomSpeed","enableZoom","addEventListener","updateProjectMatrix"],"mappings":"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","file":"main.4be6afa2.js","sourceRoot":"..","sourcesContent":["const viewSize = 6;\nconst cubeSize = 1;\nconst strokeSize = 14;\nconst wireframeColor = 0xa8a8a8;\n\nconst sphereSize = 0.22;\nconst sphereColor = 0xffffff;\nconst sceneBackground = 0xa8a8a8;\n\nvar scene = new THREE.Scene();\nvar aspectRatio = window.innerWidth / window.innerHeight;\n// var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\nconst camera = new THREE.OrthographicCamera(\n  (-aspectRatio * viewSize) / 2,\n  (aspectRatio * viewSize) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  -1000,\n  10000\n);\ncamera.position.x = 8.7;\ncamera.position.y = 4;\ncamera.position.z = 0.1;\ncamera.lookAt(0, 0, 0);\nscene.add(camera);\n\nvar renderer = new THREE.WebGLRenderer({\n  antialias: true\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\nconst canvas = document.body.appendChild(renderer.domElement);\ndocument.body.appendChild(renderer.domElement);\nscene.background = new THREE.Color(sceneBackground);\n// scene.add( new THREE.AxesHelper( 20 ) );\n\n// Create cube\n// NOTE 1: Use LineGeometry instead BufferGeometry\n// and set the positions with an array.\nvar geometry = new THREE.LineGeometry();\ngeometry.setPositions(cube(cubeSize));\n\n// Line style\n// NOTE 2: Instantiate a LineMaterial instead of LineBasicMaterial\n// with a resolution parameter.\nvar material = new THREE.LineMaterial({\n  color: wireframeColor,\n  linewidth: strokeSize, // Does nothing due to OpenGL limit\n  resolution: new THREE.Vector2(window.innerWidth, window.innerHeight)\n});\n\n// NOTE 3: Create a Line2 Object\nconst wireframe = new THREE.Line2(geometry, material);\nscene.add(wireframe);\n\n///////////////////////////////////////////////////////////////\n//// 8 Spheres\n\nconst group = new THREE.Group();\n\nconst sphereGeo = new THREE.SphereGeometry(sphereSize, 30, 30);\nconst sphereMat = new THREE.MeshBasicMaterial({ color: sphereColor });\nconst sphere1 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere2 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere3 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere4 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere5 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere6 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere7 = new THREE.Mesh(sphereGeo, sphereMat);\nconst sphere8 = new THREE.Mesh(sphereGeo, sphereMat);\n\nsphere1.position.x = -cubeSize / 2;\nsphere1.position.y = cubeSize / 2;\nsphere1.position.z = cubeSize / 2;\n\nsphere2.position.x = -cubeSize / 2;\nsphere2.position.y = -cubeSize / 2;\nsphere2.position.z = cubeSize / 2;\n\nsphere3.position.x = -cubeSize / 2;\nsphere3.position.y = -cubeSize / 2;\nsphere3.position.z = -cubeSize / 2;\n\nsphere4.position.x = cubeSize / 2;\nsphere4.position.y = -cubeSize / 2;\nsphere4.position.z = -cubeSize / 2;\n\nsphere5.position.x = cubeSize / 2;\nsphere5.position.y = cubeSize / 2;\nsphere5.position.z = -cubeSize / 2;\n\nsphere6.position.x = cubeSize / 2;\nsphere6.position.y = cubeSize / 2;\nsphere6.position.z = cubeSize / 2;\n\nsphere7.position.x = -cubeSize / 2;\nsphere7.position.y = cubeSize / 2;\nsphere7.position.z = -cubeSize / 2;\n\nsphere8.position.x = cubeSize / 2;\nsphere8.position.y = -cubeSize / 2;\nsphere8.position.z = cubeSize / 2;\n\ngroup.add(\n  sphere1,\n  sphere2,\n  sphere3,\n  sphere4,\n  sphere5,\n  sphere6,\n  sphere7,\n  sphere8\n);\n\nwireframe.material.depthTest = false;\nwireframe.renderOrder = 2;\n\n//// Group wireframe and Spheres\nconst logo = new THREE.Group();\n\nlogo.add(group, wireframe);\nscene.add(logo);\n\n//// Adding orbitControls\n\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\ncontrols.update();\n\ncontrols.autoRotate = true;\ncontrols.rotateSpeed = 0.2;\ncontrols.zoomSpeed = 0;\ncontrols.enableZoom = false;\n\n//// resize event listener\nwindow.addEventListener(\"resize\", () => {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectMatrix();\n});\n\n///////////////////////////////////////////////////////////////\n//// Default Rotation\nlogo.rotation.y += 1;\n\nfunction render() {\n  requestAnimationFrame(render);\n\n  logo.rotation.y += 0.001;\n\n  renderer.render(scene, camera);\n}\nrender();\n\nfunction cube(cubeSize) {\n  var h = cubeSize * 0.5;\n\n  var geometry = new THREE.BufferGeometry();\n  var position = [];\n  // NOTE 3 + 4: Return the position array directly so it can be\n  // passed into the LineGeometry directy and create a cube out\n  // of a single path.\n  position.push(\n    -h,\n    -h,\n    -h,\n    -h,\n    h,\n    -h,\n    h,\n    h,\n    -h,\n    h,\n    -h,\n    -h,\n    -h,\n    -h,\n    -h,\n\n    -h,\n    -h,\n    h,\n    -h,\n    h,\n    h,\n    -h,\n    h,\n    -h,\n    -h,\n    h,\n    h,\n\n    h,\n    h,\n    h,\n    h,\n    h,\n    -h,\n    h,\n    h,\n    h,\n\n    h,\n    -h,\n    h,\n    h,\n    -h,\n    -h,\n    h,\n    -h,\n    h,\n    -h,\n    -h,\n    h\n  );\n\n  return position;\n}\n"]}